openapi: 3.0.3

info:
  title: Open Service eFilm API
  description: The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Dimas Febriyanto
    url: https://dimassfeb.my.id
    email: dimassfeb@gmail.com
  version: master - might contain changes that are not yet released

servers:
  - url: http://localhost:8080
    description: eFilm API Endpoint

paths:

  # NATIONAL
  /api/national:
    post:
      summary: add new national
      tags:
        - National
      operationId: national.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NationalsRequest'
      responses:
        '200':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
    get:
      summary: get all national
      tags:
        - National
      operationId: national.get.all
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseNationalSuccess'
  /api/national/search:
    get:
      summary: get national by name
      tags:
        - National
      operationId: national.get.search
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the national to get

      responses:
        '200':
          description: national response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseNationalSuccess'
  /api/national/{id}:
    get:
      summary: get the national by id
      tags:
        - National
      operationId: national.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseNationalSuccess'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: update data national
      tags:
        - National
      operationId: national.put
      parameters:
        - name: id
          in: path
          description: The ID of the national
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NationalsRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete data national
      tags:
        - National
      operationId: national.delete
      parameters:
        - name: id
          in: path
          description: The ID of the national
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

  # ACTORS
  /api/actors:
    post:
      summary: add new actors
      tags:
        - Actors
      operationId: actors.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
    get:
      summary: get all actors
      tags:
        - Actors
      operationId: actors.get.all
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseActorSuccess'
  /api/actors/search:
    get:
      summary: get actors by national_id or name
      tags:
        - Actors
      operationId: actors.get.search
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the actors to get
        - in: query
          name: national_id
          schema:
            type: integer
          required: false
          description: Numeric ID of the national to get

      responses:
        '200':
          description: actors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseActorSuccess'
  /api/actors/{id}:
    get:
      summary: get the actors by id
      tags:
        - Actors
      operationId: actors.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseActorSuccess'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: update data actors
      tags:
        - Actors
      operationId: actors.put
      parameters:
        - name: id
          in: path
          description: The ID of the actors
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete data actors
      tags:
        - Actors
      operationId: actors.delete
      parameters:
        - name: id
          in: path
          description: The ID of the actors
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

  # DIRECTORS
  /api/directors:
    post:
      summary: Add new data Directors
      tags:
        - Directors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectorsRequest'
      responses:
        200:
          $ref: "#/components/responses/201"
        400:
          $ref: "#/components/responses/400"
    get:
      summary: Get all data Directors
      tags:
        - Directors
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseDirectorSuccess'
  /api/directors/search:
    get:
      summary: get directors by name or national_id
      tags:
        - Directors
      operationId: directors.get.search
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the directors to get
        - in: query
          name: national_id
          schema:
            type: integer
          required: false
          description: National ID of the directors to get

      responses:
        '200':
          description: directors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseDirectorSuccess'
  /api/directors/{id}:
    get:
      summary: Get Directors by ID
      tags:
        - Directors
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseDirectorSuccess'
    put:
      summary: Add new data Directors
      tags:
        - Directors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectorsRequest'
      responses:
        200:
          $ref: "#/components/responses/201"
        400:
          $ref: "#/components/responses/400"
    delete:
      summary: Delete data Directors
      tags:
        - Directors
      operationId: directors.delete
      parameters:
        - name: id
          in: path
          description: The ID of the actors
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

  # GENRES
  /api/genres:
    post:
      summary: Add new data Genres
      tags:
        - Genres
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenresRequest'
      responses:
        200:
          $ref: "#/components/responses/201"
        400:
          $ref: "#/components/responses/400"
    get:
      summary: Get all data Genres
      tags:
        - Genres
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseGenreSuccess'
  /api/genres/search:
    get:
      summary: get genres by name
      tags:
        - Genres
      operationId: genres.get.search
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the genres to get

      responses:
        '200':
          description: genres response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseGenreSuccess'
  /api/genres/{id}:
    get:
      summary: Get Genres by ID
      tags:
        - Genres
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseGenreSuccess'
    put:
      summary: Update data Genres
      tags:
        - Genres
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenresRequest'
      responses:
        200:
          $ref: "#/components/responses/201"
        400:
          $ref: "#/components/responses/400"
    delete:
      summary: Delete data genres
      tags:
        - Genres
      operationId: genres.put
      parameters:
        - name: id
          in: path
          description: The ID of the actors
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

  # MOVIE
  /api/movie:
    post:
      summary: add new movie
      tags:
        - Movie
      operationId: movie.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoviesRequest'
      responses:
        '200':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
    get:
      summary: get all movie
      tags:
        - Movie
      operationId: movie.get.all
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseMovieSuccess'
  /api/movie/search:
    get:
      summary: get movie by name, release date
      tags:
        - Movie
      operationId: movie.get.search
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: Name of the movie to get

      responses:
        '200':
          description: movie response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllResponseMovieSuccess'
  /api/movie/{id}:
    get:
      summary: get the movie by id
      tags:
        - Movie
      operationId: movie.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseMovieSuccess'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: update data movie
      tags:
        - Movie
      operationId: movie.put
      parameters:
        - name: id
          in: path
          description: The ID of the movie
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoviesRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
    delete:
      summary: Delete data movie
      tags:
        - Movie
      operationId: movie.put
      parameters:
        - name: id
          in: path
          description: The ID of the movie
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'

  # MOVIE ACTORS
  /api/movies/{movie_id}/actors:
    post:
      summary: Add a new actor to a movie
      tags:
        - Movie Actor
      operationId: movie.actors.post
      parameters:
        - name: movie_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - actor_id
                - role
              properties:
                actor_id:
                  type: integer
                  example: 1
                role:
                  type: string
                  example: Lead Actor
      responses:
        "200":
          $ref: "#/components/responses/200"
    get:
      summary: Get a list of actors with a specific movie
      tags:
        - Movie Actor
      operationId: movie.actors.get.all
      parameters:
        - name: movie_id
          in: path
          required: true
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseMovieActorSuccess'
  /movies/{movie_id}/actors/{actor_id}:
    put:
      summary: Update the role of an actors in a movie
      tags:
        - Movie Actor
      operationId: movie.actors.put
      parameters:
        - name: movie_id
          in: path
          required: true
          example: 2
        - name: actor_id
          in: path
          required: true
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  example: Lead Actor
      responses:
        '200':
          $ref: '#/components/responses/200'
    delete:
      summary: Remove an actor from a movie
      tags:
        - Movie Actor
      operationId: movie.actors.delete
      parameters:
        - name: movie_id
          in: path
          required: true
          example: 2
        - name: actor_id
          in: path
          required: true
          example:  1
      responses:
        '200':
          $ref: '#/components/responses/200'

  # MOVIE DIRECTORS
  /api/movies/{movie_id}/directors:
    post:
      summary: Add a new director to a movie
      tags:
        - Movie Director
      operationId: movie.directors.post
      parameters:
        - name: movie_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - director_id
              properties:
                director_id:
                  type: integer
                  example: 1
      responses:
        "200":
          $ref: "#/components/responses/200"
    get:
      summary: Get a list of directors with a specific movie
      tags:
        - Movie Director
      operationId: movie.directors.get.all
      parameters:
        - name: movie_id
          in: path
          required: true
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseMovieDirectorSuccess'
  /movies/{movie_id}/directors/{director_id}:
    delete:
      summary: Remove an director from a movie
      tags:
        - Movie Director
      operationId: movie.directors.delete
      parameters:
        - name: movie_id
          in: path
          required: true
          example: 2
        - name: director_id
          in: path
          required: true
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'

  # MOVIE GENRES
  /api/movies/{movie_id}/genres:
    post:
      summary: Add a new genre to a movie
      tags:
        - Movie Genre
      operationId: movie.genres.post
      parameters:
        - name: movie_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - genre_id
              properties:
                genre_id:
                  type: integer
                  example: 1
      responses:
        "200":
          $ref: "#/components/responses/200"
    get:
      summary: Get a list of genres with a specific movie
      tags:
        - Movie Genre
      operationId: movie.genres.get.all
      parameters:
        - name: movie_id
          in: path
          required: true
      responses:
        '200':
          description: Success get data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResponseMovieDirectorSuccess'
  /movies/{movie_id}/genres/{genre_id}:
    delete:
      summary: Remove an genre from a movie
      tags:
        - Movie Genre
      operationId: movie.genres.delete
      parameters:
        - name: movie_id
          in: path
          required: true
          example: 2
        - name: genre_id
          in: path
          required: true
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'


components:
  parameters:


  schemas:

    # National Request Response
    NationalsRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Indonesia
    NationalsResponse:
      type: object
      properties:
        id:
          type: int
          example: 1
        name:
          type: string
          example: Korea Selatan
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        updated_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"

    GetResponseNationalSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          $ref: '#/components/schemas/NationalsResponse'
    GetAllResponseNationalSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get all national"
        data:
          type: array
          items:
            $ref: '#/components/schemas/NationalsResponse'

    # Actor Request Response
    ActorsRequest:
      type: object
      required:
        - name
        - date_of_birth
        - nationality_id
      properties:
        name:
          type: string
          example: Lee Ji Eun
        date_of_birth:
          type: string
          example: "1992-10-19"
        nationality_id:
          type: number
          example: 1
    ActorsResponse:
      type: object
      required:
        - name
        - date_of_birth
        - nationality_id
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Lee Ji Eun
        date_of_birth:
          type: string
          example: "1992-10-19T00:00:00Z"
        nationality_id:
          type: number
          example: 1
        created_at:
          type: string
          example: "2023-08-04T19:25:42.229484Z"
        update_at:
          type: string
          example: "2023-08-04T19:25:42.229484Z"

    GetResponseActorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get actors"
        data:
          $ref: '#/components/schemas/ActorsResponse'
    GetAllResponseActorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get all actors"
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActorsResponse'

    # Director Request Response
    DirectorsRequest:
      type: object
      required:
        - name
        - date_of_birth
        - nationality_id
      properties:
        name:
          type: string
          example: Lee Ji Eun
        date_of_birth:
          type: string
          example: "1992-10-19"
        nationality_id:
          type: number
          example: 1
    DirectorsResponse:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Lee Ji Suk
        date_of_birth:
          type: string
          example: "1992-05-19T00:00:00Z"
        nationality_id:
          type: number
          example: 1
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        update_at:
          type: string
          example: "2023-07-04T19:25:42.229484Z"

    GetResponseDirectorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get actors"
        data:
          $ref: '#/components/schemas/DirectorsResponse'
    GetAllResponseDirectorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get all directors"
        data:
          type: array
          items:
            $ref: '#/components/schemas/DirectorsResponse'

    # Genres Request Response
    GenresRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Drama Korea
    GenresResponse:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Drama Korea
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        update_at:
          type: string
          example: "2023-07-04T19:25:42.229484Z"

    GetResponseGenreSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          $ref: '#/components/schemas/GenresResponse'
    GetAllResponseGenreSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get all genres"
        data:
          type: array
          items:
            $ref: '#/components/schemas/GenresResponse'

    # Movie Request Response
    MoviesRequest:
      type: object
      required:
        - name
        - title
        - release_date
        - duration
        - plot
        - poster_url
        - trailer_url
        - language
      properties:
        title:
          type: string
          example: Vagabond
        release_date:
          type: string
          example: 2019
        duration:
          type: string
          example: 110
        plot:
          type: string
          example: Cha Dal-Geon (Lee Seung-Gi) is a stunt man...
        poster_url:
          type: string
          example: https://asianwiki.com/images/f/f9/Vagabond_%28Korean_Drama%29-P1.jpg
        trailer_url:
          type: string
          example: https://www.youtube.com/watch?v=tyhnEHCUtv4
        language:
          type: string
          example: Korean / Hangeul
    MoviesResponse:
      type: object
      properties:
        title:
          type: string
          example: Vagabond
        release_date:
          type: string
          example: 2019
        duration:
          type: string
          example: 110
        plot:
          type: string
          example: Cha Dal-Geon (Lee Seung-Gi) is a stunt man...
        poster_url:
          type: string
          example: https://asianwiki.com/images/f/f9/Vagabond_%28Korean_Drama%29-P1.jpg
        trailer_url:
          type: string
          example: https://www.youtube.com/watch?v=tyhnEHCUtv4
        language:
          type: string
          example: Korean / Hangeul
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        updated_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"

    GetResponseMovieSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          $ref: '#/components/schemas/MoviesResponse'
    GetAllResponseMovieSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get all movies"
        data:
          type: array
          items:
            $ref: '#/components/schemas/MoviesResponse'

    # Movie Actor Request Response
    MovieActorsRequest:
      type: object
      required:
        - name
        - title
        - release_date
        - duration
        - plot
        - poster_url
        - trailer_url
        - language
      properties:
        title:
          type: string
          example: Vagabond
        release_date:
          type: string
          example: 2019
        duration:
          type: string
          example: 110
        plot:
          type: string
          example: Cha Dal-Geon (Lee Seung-Gi) is a stunt man...
        poster_url:
          type: string
          example: https://asianwiki.com/images/f/f9/Vagabond_%28Korean_Drama%29-P1.jpg
        trailer_url:
          type: string
          example: https://www.youtube.com/watch?v=tyhnEHCUtv4
        language:
          type: string
          example: Korean / Hangeul
    MovieActorsResponse:
      type: object
      properties:
        title:
          type: string
          example: Vagabond
        release_date:
          type: string
          example: 2019
        duration:
          type: string
          example: 110
        plot:
          type: string
          example: Cha Dal-Geon (Lee Seung-Gi) is a stunt man...
        poster_url:
          type: string
          example: https://asianwiki.com/images/f/f9/Vagabond_%28Korean_Drama%29-P1.jpg
        trailer_url:
          type: string
          example: https://www.youtube.com/watch?v=tyhnEHCUtv4
        language:
          type: string
          example: Korean / Hangeul
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        updated_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"

    GetResponseMovieActorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieActorsResponse'
            actors:
              type: array
              items:
                $ref: '#/components/schemas/MovieActorsResponse'
    GetAllResponseMovieActorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieActorsResponse'
            actors:
              type: array
              items:
                $ref: '#/components/schemas/MovieActorsResponse'

    # Movie Director Request Response
    MovieDirectorsRequest:
      type: object
      required:
        - name
        - title
        - release_date
        - duration
        - plot
        - poster_url
        - trailer_url
        - language
      properties:
        title:
          type: string
          example: Vagabond
        release_date:
          type: string
          example: 2019
        duration:
          type: string
          example: 110
        plot:
          type: string
          example: Cha Dal-Geon (Lee Seung-Gi) is a stunt man...
        poster_url:
          type: string
          example: https://asianwiki.com/images/f/f9/Vagabond_%28Korean_Drama%29-P1.jpg
        trailer_url:
          type: string
          example: https://www.youtube.com/watch?v=tyhnEHCUtv4
        language:
          type: string
          example: Korean / Hangeul
    MovieDirectorsResponse:
      type: object
      properties:
        movie:
          type: object
          properties:
            movie_id:
              type: int
              example: Vagabond
            title:
              type: string
              example: Vagabond
            release_date:
              type: string
              example: 1972-10-06T00:00:00Z
        directors:
          type: array
          properties:
            director_id:
              type: int
              example: Vagabond
            name:
              type: string
              example: Yoo In Sik
            date_of_birth:
              type: string
              example: 1972-10-06T00:00:00Z

    GetResponseMovieDirectorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieDirectorsResponse'
            directors:
              type: array
              items:
                $ref: '#/components/schemas/DirectorsResponse'
    GetAllResponseMovieDirectorSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieDirectorsResponse'
            actors:
              type: array
              items:
                $ref: '#/components/schemas/MovieDirectorsResponse'

    # Movie Director Request Response
    MovieGenresRequest:
      type: object
      required:
        - movie_id
        - genre_id
      properties:
        movie_id:
          type: integer
          example: 1
        genre_id:
          type: integer
          example: 2

    MovieGenresResponse:
      type: object
      properties:
        id:
          type: integer
          example: Vagabond
        movie_id:
          type: integer
          example: 1
        genre_id:
          type: integer
          example: 2
        created_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"
        updated_at:
          type: string
          example: "2023-03-04T19:25:42.229484Z"

    GetResponseMovieGenreSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieGenresResponse'
            director:
              type: array
              items:
                $ref: '#/components/schemas/GenresResponse'
    GetAllResponseMovieGenreSuccess:
      type: object
      properties:
        code:
          type: number
          example: 200
        status:
          type: string
          example: OK
        message:
          type: string
          example: "Successfully get genres"
        data:
          properties:
            movie:
              $ref: '#/components/schemas/MovieGenresResponse'
            actors:
              type: array
              items:
                $ref: '#/components/schemas/MovieGenresResponse'



  responses:
    200:
      description: Response if successful
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: OK
              message:
                type: string
                example: "Successfully"
    201:
      description: Response if successful has created new data
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 201
              status:
                type: string
                example: Status Created
              message:
                type: string
                example: "Successfully created data"
    204:
      description: Response if successful has deleted data
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: Status No Content
              message:
                type: string
                example: "Successfully created data"
    400:
      description: Response if the request payload does not complete
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: Status Bad Request
              message:
                type: string
                example: "Request playload is Required"
    404:
      description: Response if the data is not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              status:
                type: string
                example: Status Not Found
              message:
                type: string
                example: "Data Not Found"